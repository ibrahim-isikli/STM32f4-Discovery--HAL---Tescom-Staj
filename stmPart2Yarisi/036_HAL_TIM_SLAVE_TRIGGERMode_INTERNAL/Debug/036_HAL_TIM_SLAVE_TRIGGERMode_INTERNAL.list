
036_HAL_TIM_SLAVE_TRIGGERMode_INTERNAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fe0  08001fe0  00011fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c4  200000c4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008575  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000012f4  00000000  00000000  000285b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000008f0  00000000  00000000  000298a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000858  00000000  00000000  0002a198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f7fb  00000000  00000000  0002a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008fb5  00000000  00000000  0004a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c3c81  00000000  00000000  000531a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00116e21  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002544  00000000  00000000  00116e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fc8 	.word	0x08001fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001fc8 	.word	0x08001fc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_Init+0x40>)
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_Init+0x40>)
 80004e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_Init+0x40>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 f92b 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 f808 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000500:	f001 fc62 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023c00 	.word	0x40023c00

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x54>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x58>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	fbb3 f3f1 	udiv	r3, r3, r1
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f943 	bl	80007ba <HAL_SYSTICK_Config>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e00e      	b.n	800055c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	d80a      	bhi.n	800055a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 f90b 	bl	8000766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_InitTick+0x5c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e000      	b.n	800055c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000008 	.word	0x20000008
 8000568:	20000004 	.word	0x20000004
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	20000028 	.word	0x20000028

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000028 	.word	0x20000028

080005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60d3      	str	r3, [r2, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_GetPriorityGrouping+0x18>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	f003 0307 	and.w	r3, r3, #7
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <__NVIC_EnableIRQ+0x38>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff8e 	bl	8000650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff29 	bl	80005b0 <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff3e 	bl	80005f8 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff8e 	bl	80006a4 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5d 	bl	8000650 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff31 	bl	8000614 <__NVIC_EnableIRQ>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffa2 	bl	800070c <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e267      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d075      	beq.n	80008de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007f2:	4b88      	ldr	r3, [pc, #544]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	f003 030c 	and.w	r3, r3, #12
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d00c      	beq.n	8000818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007fe:	4b85      	ldr	r3, [pc, #532]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000806:	2b08      	cmp	r3, #8
 8000808:	d112      	bne.n	8000830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800080a:	4b82      	ldr	r3, [pc, #520]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000816:	d10b      	bne.n	8000830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000818:	4b7e      	ldr	r3, [pc, #504]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d05b      	beq.n	80008dc <HAL_RCC_OscConfig+0x108>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d157      	bne.n	80008dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e242      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000838:	d106      	bne.n	8000848 <HAL_RCC_OscConfig+0x74>
 800083a:	4b76      	ldr	r3, [pc, #472]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a75      	ldr	r2, [pc, #468]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	e01d      	b.n	8000884 <HAL_RCC_OscConfig+0xb0>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000850:	d10c      	bne.n	800086c <HAL_RCC_OscConfig+0x98>
 8000852:	4b70      	ldr	r3, [pc, #448]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a6f      	ldr	r2, [pc, #444]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a6c      	ldr	r2, [pc, #432]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	e00b      	b.n	8000884 <HAL_RCC_OscConfig+0xb0>
 800086c:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a65      	ldr	r2, [pc, #404]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 800087e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d013      	beq.n	80008b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800088c:	f7ff fe84 	bl	8000598 <HAL_GetTick>
 8000890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000892:	e008      	b.n	80008a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000894:	f7ff fe80 	bl	8000598 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	2b64      	cmp	r3, #100	; 0x64
 80008a0:	d901      	bls.n	80008a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80008a2:	2303      	movs	r3, #3
 80008a4:	e207      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a6:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f0      	beq.n	8000894 <HAL_RCC_OscConfig+0xc0>
 80008b2:	e014      	b.n	80008de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b4:	f7ff fe70 	bl	8000598 <HAL_GetTick>
 80008b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ba:	e008      	b.n	80008ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008bc:	f7ff fe6c 	bl	8000598 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b64      	cmp	r3, #100	; 0x64
 80008c8:	d901      	bls.n	80008ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80008ca:	2303      	movs	r3, #3
 80008cc:	e1f3      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f0      	bne.n	80008bc <HAL_RCC_OscConfig+0xe8>
 80008da:	e000      	b.n	80008de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d063      	beq.n	80009b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ea:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f6:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008fe:	2b08      	cmp	r3, #8
 8000900:	d11c      	bne.n	800093c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000902:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d116      	bne.n	800093c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	4b41      	ldr	r3, [pc, #260]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <HAL_RCC_OscConfig+0x152>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d001      	beq.n	8000926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e1c7      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	4937      	ldr	r1, [pc, #220]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000936:	4313      	orrs	r3, r2
 8000938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093a:	e03a      	b.n	80009b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d020      	beq.n	8000986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <HAL_RCC_OscConfig+0x244>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800094a:	f7ff fe25 	bl	8000598 <HAL_GetTick>
 800094e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000950:	e008      	b.n	8000964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000952:	f7ff fe21 	bl	8000598 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d901      	bls.n	8000964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000960:	2303      	movs	r3, #3
 8000962:	e1a8      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f0      	beq.n	8000952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4925      	ldr	r1, [pc, #148]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 8000980:	4313      	orrs	r3, r2
 8000982:	600b      	str	r3, [r1, #0]
 8000984:	e015      	b.n	80009b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000986:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <HAL_RCC_OscConfig+0x244>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800098c:	f7ff fe04 	bl	8000598 <HAL_GetTick>
 8000990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000992:	e008      	b.n	80009a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000994:	f7ff fe00 	bl	8000598 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d901      	bls.n	80009a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80009a2:	2303      	movs	r3, #3
 80009a4:	e187      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f0      	bne.n	8000994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d036      	beq.n	8000a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d016      	beq.n	80009f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_RCC_OscConfig+0x248>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009cc:	f7ff fde4 	bl	8000598 <HAL_GetTick>
 80009d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d2:	e008      	b.n	80009e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d4:	f7ff fde0 	bl	8000598 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d901      	bls.n	80009e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80009e2:	2303      	movs	r3, #3
 80009e4:	e167      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_RCC_OscConfig+0x240>)
 80009e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f0      	beq.n	80009d4 <HAL_RCC_OscConfig+0x200>
 80009f2:	e01b      	b.n	8000a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_RCC_OscConfig+0x248>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fa:	f7ff fdcd 	bl	8000598 <HAL_GetTick>
 80009fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a00:	e00e      	b.n	8000a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a02:	f7ff fdc9 	bl	8000598 <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d907      	bls.n	8000a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000a10:	2303      	movs	r3, #3
 8000a12:	e150      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
 8000a14:	40023800 	.word	0x40023800
 8000a18:	42470000 	.word	0x42470000
 8000a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a20:	4b88      	ldr	r3, [pc, #544]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1ea      	bne.n	8000a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 8097 	beq.w	8000b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3e:	4b81      	ldr	r3, [pc, #516]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a7c      	ldr	r2, [pc, #496]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b7a      	ldr	r3, [pc, #488]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a66:	2301      	movs	r3, #1
 8000a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a6a:	4b77      	ldr	r3, [pc, #476]	; (8000c48 <HAL_RCC_OscConfig+0x474>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d118      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a76:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <HAL_RCC_OscConfig+0x474>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a73      	ldr	r2, [pc, #460]	; (8000c48 <HAL_RCC_OscConfig+0x474>)
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fd89 	bl	8000598 <HAL_GetTick>
 8000a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8a:	f7ff fd85 	bl	8000598 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e10c      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <HAL_RCC_OscConfig+0x474>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f0      	beq.n	8000a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <HAL_RCC_OscConfig+0x2ea>
 8000ab0:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ab4:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6713      	str	r3, [r2, #112]	; 0x70
 8000abc:	e01c      	b.n	8000af8 <HAL_RCC_OscConfig+0x324>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x30c>
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aca:	4a5e      	ldr	r2, [pc, #376]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ad2:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ad6:	4a5b      	ldr	r2, [pc, #364]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ade:	e00b      	b.n	8000af8 <HAL_RCC_OscConfig+0x324>
 8000ae0:	4b58      	ldr	r3, [pc, #352]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ae4:	4a57      	ldr	r2, [pc, #348]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6713      	str	r3, [r2, #112]	; 0x70
 8000aec:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af0:	4a54      	ldr	r2, [pc, #336]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000af2:	f023 0304 	bic.w	r3, r3, #4
 8000af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d015      	beq.n	8000b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b00:	f7ff fd4a 	bl	8000598 <HAL_GetTick>
 8000b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b06:	e00a      	b.n	8000b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	f7ff fd46 	bl	8000598 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e0cb      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1e:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0ee      	beq.n	8000b08 <HAL_RCC_OscConfig+0x334>
 8000b2a:	e014      	b.n	8000b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2c:	f7ff fd34 	bl	8000598 <HAL_GetTick>
 8000b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b32:	e00a      	b.n	8000b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b34:	f7ff fd30 	bl	8000598 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e0b5      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1ee      	bne.n	8000b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d105      	bne.n	8000b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 80a1 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d05c      	beq.n	8000c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d141      	bne.n	8000c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <HAL_RCC_OscConfig+0x478>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fd04 	bl	8000598 <HAL_GetTick>
 8000b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b92:	e008      	b.n	8000ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fd00 	bl	8000598 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e087      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f0      	bne.n	8000b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69da      	ldr	r2, [r3, #28]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	085b      	lsrs	r3, r3, #1
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	061b      	lsls	r3, r3, #24
 8000bd6:	491b      	ldr	r1, [pc, #108]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_RCC_OscConfig+0x478>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be2:	f7ff fcd9 	bl	8000598 <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be8:	e008      	b.n	8000bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bea:	f7ff fcd5 	bl	8000598 <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e05c      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f0      	beq.n	8000bea <HAL_RCC_OscConfig+0x416>
 8000c08:	e054      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_RCC_OscConfig+0x478>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fcc2 	bl	8000598 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c18:	f7ff fcbe 	bl	8000598 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e045      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_RCC_OscConfig+0x470>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <HAL_RCC_OscConfig+0x444>
 8000c36:	e03d      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d107      	bne.n	8000c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e038      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_RCC_OscConfig+0x4ec>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d028      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d121      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d11a      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c80:	4013      	ands	r3, r2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d111      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d107      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d001      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e0cc      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cd8:	4b68      	ldr	r3, [pc, #416]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d90c      	bls.n	8000d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cee:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d001      	beq.n	8000d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0b8      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d18:	4b59      	ldr	r3, [pc, #356]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d30:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d3c:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	494d      	ldr	r1, [pc, #308]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d044      	beq.n	8000de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d107      	bne.n	8000d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d119      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e07f      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d003      	beq.n	8000d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d107      	bne.n	8000d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e06f      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e067      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f023 0203 	bic.w	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4934      	ldr	r1, [pc, #208]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000db4:	f7ff fbf0 	bl	8000598 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dba:	e00a      	b.n	8000dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dbc:	f7ff fbec 	bl	8000598 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e04f      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 020c 	and.w	r2, r3, #12
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d1eb      	bne.n	8000dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d20c      	bcs.n	8000e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_RCC_ClockConfig+0x1b8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d001      	beq.n	8000e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e032      	b.n	8000e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4916      	ldr	r1, [pc, #88]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d009      	beq.n	8000e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	490e      	ldr	r1, [pc, #56]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e4a:	f000 f821 	bl	8000e90 <HAL_RCC_GetSysClockFreq>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_RCC_ClockConfig+0x1bc>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	490a      	ldr	r1, [pc, #40]	; (8000e84 <HAL_RCC_ClockConfig+0x1c0>)
 8000e5c:	5ccb      	ldrb	r3, [r1, r3]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_RCC_ClockConfig+0x1c4>)
 8000e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_RCC_ClockConfig+0x1c8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb50 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	08001fe0 	.word	0x08001fe0
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e94:	b094      	sub	sp, #80	; 0x50
 8000e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ea8:	4b79      	ldr	r3, [pc, #484]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	f200 80e1 	bhi.w	800107c <HAL_RCC_GetSysClockFreq+0x1ec>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d003      	beq.n	8000eca <HAL_RCC_GetSysClockFreq+0x3a>
 8000ec2:	e0db      	b.n	800107c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ec4:	4b73      	ldr	r3, [pc, #460]	; (8001094 <HAL_RCC_GetSysClockFreq+0x204>)
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8000ec8:	e0db      	b.n	8001082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_GetSysClockFreq+0x208>)
 8000ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8000ece:	e0d8      	b.n	8001082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ed0:	4b6f      	ldr	r3, [pc, #444]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d063      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee6:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	2200      	movs	r2, #0
 8000eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
 8000efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000f02:	4622      	mov	r2, r4
 8000f04:	462b      	mov	r3, r5
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	f04f 0100 	mov.w	r1, #0
 8000f0e:	0159      	lsls	r1, r3, #5
 8000f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000f14:	0150      	lsls	r0, r2, #5
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	1a51      	subs	r1, r2, r1
 8000f1e:	6139      	str	r1, [r7, #16]
 8000f20:	4629      	mov	r1, r5
 8000f22:	eb63 0301 	sbc.w	r3, r3, r1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000f34:	4659      	mov	r1, fp
 8000f36:	018b      	lsls	r3, r1, #6
 8000f38:	4651      	mov	r1, sl
 8000f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f3e:	4651      	mov	r1, sl
 8000f40:	018a      	lsls	r2, r1, #6
 8000f42:	4651      	mov	r1, sl
 8000f44:	ebb2 0801 	subs.w	r8, r2, r1
 8000f48:	4659      	mov	r1, fp
 8000f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f62:	4690      	mov	r8, r2
 8000f64:	4699      	mov	r9, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	eb18 0303 	adds.w	r3, r8, r3
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	462b      	mov	r3, r5
 8000f70:	eb49 0303 	adc.w	r3, r9, r3
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f82:	4629      	mov	r1, r5
 8000f84:	024b      	lsls	r3, r1, #9
 8000f86:	4621      	mov	r1, r4
 8000f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	024a      	lsls	r2, r1, #9
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f96:	2200      	movs	r2, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fa0:	f7ff f912 	bl	80001c8 <__aeabi_uldivmod>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4613      	mov	r3, r2
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fac:	e058      	b.n	8001060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	099b      	lsrs	r3, r3, #6
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	4611      	mov	r1, r2
 8000fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8000fbe:	623b      	str	r3, [r7, #32]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000fc8:	4642      	mov	r2, r8
 8000fca:	464b      	mov	r3, r9
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	f04f 0100 	mov.w	r1, #0
 8000fd4:	0159      	lsls	r1, r3, #5
 8000fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000fda:	0150      	lsls	r0, r2, #5
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001000:	ebb2 040a 	subs.w	r4, r2, sl
 8001004:	eb63 050b 	sbc.w	r5, r3, fp
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	00eb      	lsls	r3, r5, #3
 8001012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001016:	00e2      	lsls	r2, r4, #3
 8001018:	4614      	mov	r4, r2
 800101a:	461d      	mov	r5, r3
 800101c:	4643      	mov	r3, r8
 800101e:	18e3      	adds	r3, r4, r3
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	464b      	mov	r3, r9
 8001024:	eb45 0303 	adc.w	r3, r5, r3
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001036:	4629      	mov	r1, r5
 8001038:	028b      	lsls	r3, r1, #10
 800103a:	4621      	mov	r1, r4
 800103c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001040:	4621      	mov	r1, r4
 8001042:	028a      	lsls	r2, r1, #10
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104a:	2200      	movs	r2, #0
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	61fa      	str	r2, [r7, #28]
 8001050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001054:	f7ff f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4613      	mov	r3, r2
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_RCC_GetSysClockFreq+0x200>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	3301      	adds	r3, #1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800107a:	e002      	b.n	8001082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_RCC_GetSysClockFreq+0x204>)
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001084:	4618      	mov	r0, r3
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	00f42400 	.word	0x00f42400
 8001098:	007a1200 	.word	0x007a1200

0800109c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e041      	b.n	8001132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fea8 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3304      	adds	r3, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4610      	mov	r0, r2
 80010dc:	f000 fad6 	bl	800168c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d001      	beq.n	8001154 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e046      	b.n	80011e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <HAL_TIM_Base_Start+0xb4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d022      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116e:	d01d      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_TIM_Base_Start+0xb8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d018      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_TIM_Base_Start+0xbc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_TIM_Base_Start+0xc0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00e      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_TIM_Base_Start+0xc4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d009      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_TIM_Base_Start+0xc8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d004      	beq.n	80011ac <HAL_TIM_Base_Start+0x70>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_Base_Start+0xcc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d111      	bne.n	80011d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d010      	beq.n	80011e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011ce:	e007      	b.n	80011e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0201 	orr.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40000400 	.word	0x40000400
 80011f8:	40000800 	.word	0x40000800
 80011fc:	40000c00 	.word	0x40000c00
 8001200:	40010400 	.word	0x40010400
 8001204:	40014000 	.word	0x40014000
 8001208:	40001800 	.word	0x40001800

0800120c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b02      	cmp	r3, #2
 8001220:	d122      	bne.n	8001268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b02      	cmp	r3, #2
 800122e:	d11b      	bne.n	8001268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f06f 0202 	mvn.w	r2, #2
 8001238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f9fe 	bl	8001650 <HAL_TIM_IC_CaptureCallback>
 8001254:	e005      	b.n	8001262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f9f0 	bl	800163c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fa01 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d122      	bne.n	80012bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b04      	cmp	r3, #4
 8001282:	d11b      	bne.n	80012bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f06f 0204 	mvn.w	r2, #4
 800128c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2202      	movs	r2, #2
 8001292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f9d4 	bl	8001650 <HAL_TIM_IC_CaptureCallback>
 80012a8:	e005      	b.n	80012b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f9c6 	bl	800163c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f9d7 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d122      	bne.n	8001310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d11b      	bne.n	8001310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f06f 0208 	mvn.w	r2, #8
 80012e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f9aa 	bl	8001650 <HAL_TIM_IC_CaptureCallback>
 80012fc:	e005      	b.n	800130a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f99c 	bl	800163c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f9ad 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b10      	cmp	r3, #16
 800131c:	d122      	bne.n	8001364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b10      	cmp	r3, #16
 800132a:	d11b      	bne.n	8001364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f06f 0210 	mvn.w	r2, #16
 8001334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2208      	movs	r2, #8
 800133a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f980 	bl	8001650 <HAL_TIM_IC_CaptureCallback>
 8001350:	e005      	b.n	800135e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f972 	bl	800163c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f983 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10e      	bne.n	8001390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0201 	mvn.w	r2, #1
 8001388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f94c 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b80      	cmp	r3, #128	; 0x80
 800139c:	d10e      	bne.n	80013bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	2b80      	cmp	r3, #128	; 0x80
 80013aa:	d107      	bne.n	80013bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fbb6 	bl	8001b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d4:	2b40      	cmp	r3, #64	; 0x40
 80013d6:	d107      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f948 	bl	8001678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	2b20      	cmp	r3, #32
 8001402:	d107      	bne.n	8001414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0220 	mvn.w	r2, #32
 800140c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fb80 	bl	8001b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_TIM_ConfigClockSource+0x18>
 8001430:	2302      	movs	r3, #2
 8001432:	e0b3      	b.n	800159c <HAL_TIM_ConfigClockSource+0x180>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800145a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800146c:	d03e      	beq.n	80014ec <HAL_TIM_ConfigClockSource+0xd0>
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	f200 8087 	bhi.w	8001584 <HAL_TIM_ConfigClockSource+0x168>
 8001476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147a:	f000 8085 	beq.w	8001588 <HAL_TIM_ConfigClockSource+0x16c>
 800147e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001482:	d87f      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 8001484:	2b70      	cmp	r3, #112	; 0x70
 8001486:	d01a      	beq.n	80014be <HAL_TIM_ConfigClockSource+0xa2>
 8001488:	2b70      	cmp	r3, #112	; 0x70
 800148a:	d87b      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 800148c:	2b60      	cmp	r3, #96	; 0x60
 800148e:	d050      	beq.n	8001532 <HAL_TIM_ConfigClockSource+0x116>
 8001490:	2b60      	cmp	r3, #96	; 0x60
 8001492:	d877      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 8001494:	2b50      	cmp	r3, #80	; 0x50
 8001496:	d03c      	beq.n	8001512 <HAL_TIM_ConfigClockSource+0xf6>
 8001498:	2b50      	cmp	r3, #80	; 0x50
 800149a:	d873      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 800149c:	2b40      	cmp	r3, #64	; 0x40
 800149e:	d058      	beq.n	8001552 <HAL_TIM_ConfigClockSource+0x136>
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	d86f      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 80014a4:	2b30      	cmp	r3, #48	; 0x30
 80014a6:	d064      	beq.n	8001572 <HAL_TIM_ConfigClockSource+0x156>
 80014a8:	2b30      	cmp	r3, #48	; 0x30
 80014aa:	d86b      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d060      	beq.n	8001572 <HAL_TIM_ConfigClockSource+0x156>
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	d867      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d05c      	beq.n	8001572 <HAL_TIM_ConfigClockSource+0x156>
 80014b8:	2b10      	cmp	r3, #16
 80014ba:	d05a      	beq.n	8001572 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80014bc:	e062      	b.n	8001584 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f000 fa85 	bl	80019dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	609a      	str	r2, [r3, #8]
      break;
 80014ea:	e04e      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f000 fa6e 	bl	80019dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800150e:	609a      	str	r2, [r3, #8]
      break;
 8001510:	e03b      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	461a      	mov	r2, r3
 8001520:	f000 f9e2 	bl	80018e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2150      	movs	r1, #80	; 0x50
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fa3b 	bl	80019a6 <TIM_ITRx_SetConfig>
      break;
 8001530:	e02b      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	461a      	mov	r2, r3
 8001540:	f000 fa01 	bl	8001946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2160      	movs	r1, #96	; 0x60
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fa2b 	bl	80019a6 <TIM_ITRx_SetConfig>
      break;
 8001550:	e01b      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	461a      	mov	r2, r3
 8001560:	f000 f9c2 	bl	80018e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fa1b 	bl	80019a6 <TIM_ITRx_SetConfig>
      break;
 8001570:	e00b      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f000 fa12 	bl	80019a6 <TIM_ITRx_SetConfig>
        break;
 8001582:	e002      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e031      	b.n	8001620 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80015cc:	6839      	ldr	r1, [r7, #0]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8fc 	bl	80017cc <TIM_SlaveTimer_SetConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e018      	b.n	8001620 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800160c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <TIM_Base_SetConfig+0x114>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <TIM_Base_SetConfig+0x40>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016aa:	d00f      	beq.n	80016cc <TIM_Base_SetConfig+0x40>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <TIM_Base_SetConfig+0x118>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00b      	beq.n	80016cc <TIM_Base_SetConfig+0x40>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <TIM_Base_SetConfig+0x11c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <TIM_Base_SetConfig+0x40>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <TIM_Base_SetConfig+0x120>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d003      	beq.n	80016cc <TIM_Base_SetConfig+0x40>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <TIM_Base_SetConfig+0x124>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d108      	bne.n	80016de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <TIM_Base_SetConfig+0x114>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02b      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d027      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <TIM_Base_SetConfig+0x118>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d023      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <TIM_Base_SetConfig+0x11c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a2a      	ldr	r2, [pc, #168]	; (80017ac <TIM_Base_SetConfig+0x120>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01b      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a29      	ldr	r2, [pc, #164]	; (80017b0 <TIM_Base_SetConfig+0x124>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d017      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <TIM_Base_SetConfig+0x128>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a27      	ldr	r2, [pc, #156]	; (80017b8 <TIM_Base_SetConfig+0x12c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00f      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <TIM_Base_SetConfig+0x130>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00b      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <TIM_Base_SetConfig+0x134>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <TIM_Base_SetConfig+0x138>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d003      	beq.n	800173e <TIM_Base_SetConfig+0xb2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <TIM_Base_SetConfig+0x13c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d108      	bne.n	8001750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <TIM_Base_SetConfig+0x114>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0xf8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <TIM_Base_SetConfig+0x124>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d103      	bne.n	800178c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	615a      	str	r2, [r3, #20]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40000400 	.word	0x40000400
 80017a8:	40000800 	.word	0x40000800
 80017ac:	40000c00 	.word	0x40000c00
 80017b0:	40010400 	.word	0x40010400
 80017b4:	40014000 	.word	0x40014000
 80017b8:	40014400 	.word	0x40014400
 80017bc:	40014800 	.word	0x40014800
 80017c0:	40001800 	.word	0x40001800
 80017c4:	40001c00 	.word	0x40001c00
 80017c8:	40002000 	.word	0x40002000

080017cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b70      	cmp	r3, #112	; 0x70
 8001810:	d01a      	beq.n	8001848 <TIM_SlaveTimer_SetConfig+0x7c>
 8001812:	2b70      	cmp	r3, #112	; 0x70
 8001814:	d860      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8001816:	2b60      	cmp	r3, #96	; 0x60
 8001818:	d054      	beq.n	80018c4 <TIM_SlaveTimer_SetConfig+0xf8>
 800181a:	2b60      	cmp	r3, #96	; 0x60
 800181c:	d85c      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800181e:	2b50      	cmp	r3, #80	; 0x50
 8001820:	d046      	beq.n	80018b0 <TIM_SlaveTimer_SetConfig+0xe4>
 8001822:	2b50      	cmp	r3, #80	; 0x50
 8001824:	d858      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d019      	beq.n	800185e <TIM_SlaveTimer_SetConfig+0x92>
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	d854      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800182e:	2b30      	cmp	r3, #48	; 0x30
 8001830:	d054      	beq.n	80018dc <TIM_SlaveTimer_SetConfig+0x110>
 8001832:	2b30      	cmp	r3, #48	; 0x30
 8001834:	d850      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 8001836:	2b20      	cmp	r3, #32
 8001838:	d050      	beq.n	80018dc <TIM_SlaveTimer_SetConfig+0x110>
 800183a:	2b20      	cmp	r3, #32
 800183c:	d84c      	bhi.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d04c      	beq.n	80018dc <TIM_SlaveTimer_SetConfig+0x110>
 8001842:	2b10      	cmp	r3, #16
 8001844:	d04a      	beq.n	80018dc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8001846:	e047      	b.n	80018d8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68d9      	ldr	r1, [r3, #12]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f000 f8c0 	bl	80019dc <TIM_ETR_SetConfig>
      break;
 800185c:	e03f      	b.n	80018de <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d101      	bne.n	800186a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e03a      	b.n	80018e0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001890:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	621a      	str	r2, [r3, #32]
      break;
 80018ae:	e016      	b.n	80018de <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	461a      	mov	r2, r3
 80018be:	f000 f813 	bl	80018e8 <TIM_TI1_ConfigInputStage>
      break;
 80018c2:	e00c      	b.n	80018de <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	461a      	mov	r2, r3
 80018d2:	f000 f838 	bl	8001946 <TIM_TI2_ConfigInputStage>
      break;
 80018d6:	e002      	b.n	80018de <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80018dc:	bf00      	nop
  }
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	f023 0201 	bic.w	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f023 030a 	bic.w	r3, r3, #10
 8001924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	621a      	str	r2, [r3, #32]
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001946:	b480      	push	{r7}
 8001948:	b087      	sub	sp, #28
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f023 0210 	bic.w	r2, r3, #16
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	621a      	str	r2, [r3, #32]
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f043 0307 	orr.w	r3, r3, #7
 80019c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	021a      	lsls	r2, r3, #8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e05a      	b.n	8001aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d022      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a80:	d01d      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d018      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00e      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10c      	bne.n	8001ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800
 8001b04:	40000c00 	.word	0x40000c00
 8001b08:	40010400 	.word	0x40010400
 8001b0c:	40014000 	.word	0x40014000
 8001b10:	40001800 	.word	0x40001800

08001b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f7fe fcc4 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b44:	f000 f81a 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM1_Init();
 8001b48:	f000 f882 	bl	8001c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b4c:	f000 f8d2 	bl	8001cf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim1);
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <main+0x30>)
 8001b52:	f7ff faf3 	bl	800113c <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count_TIM1 = __HAL_TIM_GetCounter(&htim1);
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <main+0x30>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <main+0x34>)
 8001b5e:	6013      	str	r3, [r2, #0]
	  count_TIM2 = __HAL_TIM_GetCounter(&htim2);
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <main+0x38>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <main+0x3c>)
 8001b68:	6013      	str	r3, [r2, #0]
	  count_TIM1 = __HAL_TIM_GetCounter(&htim1);
 8001b6a:	e7f4      	b.n	8001b56 <main+0x1a>
 8001b6c:	2000002c 	.word	0x2000002c
 8001b70:	200000bc 	.word	0x200000bc
 8001b74:	20000074 	.word	0x20000074
 8001b78:	200000c0 	.word	0x200000c0

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2230      	movs	r2, #48	; 0x30
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fa14 	bl	8001fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <SystemClock_Config+0xcc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <SystemClock_Config+0xcc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <SystemClock_Config+0xcc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a21      	ldr	r2, [pc, #132]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bf0:	23a8      	movs	r3, #168	; 0xa8
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0320 	add.w	r3, r7, #32
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fde7 	bl	80007d4 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c0c:	f000 f8d6 	bl	8001dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f848 	bl	8000cc4 <HAL_RCC_ClockConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c3a:	f000 f8bf 	bl	8001dbc <Error_Handler>
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3750      	adds	r7, #80	; 0x50
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <MX_TIM1_Init+0xa0>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c74:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c82:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001c9c:	f7ff f9fe 	bl	800109c <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ca6:	f000 f889 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001cb8:	f7ff fbb0 	bl	800141c <HAL_TIM_ConfigClockSource>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001cc2:	f000 f87b 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <MX_TIM1_Init+0x9c>)
 8001cd4:	f7ff fea2 	bl	8001a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001cde:	f000 f86d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000002c 	.word	0x2000002c
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d2a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d4c:	f7ff f9a6 	bl	800109c <HAL_TIM_Base_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001d56:	f000 f831 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4619      	mov	r1, r3
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d68:	f7ff fb58 	bl	800141c <HAL_TIM_ConfigClockSource>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001d72:	f000 f823 	bl	8001dbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001d76:	2306      	movs	r3, #6
 8001d78:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001d86:	f7ff fc0d 	bl	80015a4 <HAL_TIM_SlaveConfigSynchro>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d90:	f000 f814 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_TIM2_Init+0xc4>)
 8001da2:	f7ff fe3b 	bl	8001a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001dac:	f000 f806 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	; 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000074 	.word	0x20000074

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e06:	2007      	movs	r0, #7
 8001e08:	f7fe fca2 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_Base_MspInit+0x70>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e46:	e01a      	b.n	8001e7e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d115      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_TIM_Base_MspInit+0x74>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201c      	movs	r0, #28
 8001e74:	f7fe fc77 	bl	8000766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e78:	201c      	movs	r0, #28
 8001e7a:	f7fe fc90 	bl	800079e <HAL_NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40023800 	.word	0x40023800

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler+0x4>

08001e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <UsageFault_Handler+0x4>

08001eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001edc:	f7fe fb48 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <TIM2_IRQHandler+0x10>)
 8001eea:	f7ff f98f 	bl	800120c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000074 	.word	0x20000074

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f46:	f7ff ffd7 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f000 f811 	bl	8001f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff fdf5 	bl	8001b3c <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f60:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 8001f64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f68:	200000c4 	.word	0x200000c4

08001f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC_IRQHandler>
	...

08001f70 <__libc_init_array>:
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	4d0d      	ldr	r5, [pc, #52]	; (8001fa8 <__libc_init_array+0x38>)
 8001f74:	4c0d      	ldr	r4, [pc, #52]	; (8001fac <__libc_init_array+0x3c>)
 8001f76:	1b64      	subs	r4, r4, r5
 8001f78:	10a4      	asrs	r4, r4, #2
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	42a6      	cmp	r6, r4
 8001f7e:	d109      	bne.n	8001f94 <__libc_init_array+0x24>
 8001f80:	4d0b      	ldr	r5, [pc, #44]	; (8001fb0 <__libc_init_array+0x40>)
 8001f82:	4c0c      	ldr	r4, [pc, #48]	; (8001fb4 <__libc_init_array+0x44>)
 8001f84:	f000 f820 	bl	8001fc8 <_init>
 8001f88:	1b64      	subs	r4, r4, r5
 8001f8a:	10a4      	asrs	r4, r4, #2
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	42a6      	cmp	r6, r4
 8001f90:	d105      	bne.n	8001f9e <__libc_init_array+0x2e>
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f98:	4798      	blx	r3
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	e7ee      	b.n	8001f7c <__libc_init_array+0xc>
 8001f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fa2:	4798      	blx	r3
 8001fa4:	3601      	adds	r6, #1
 8001fa6:	e7f2      	b.n	8001f8e <__libc_init_array+0x1e>
 8001fa8:	08001ff8 	.word	0x08001ff8
 8001fac:	08001ff8 	.word	0x08001ff8
 8001fb0:	08001ff8 	.word	0x08001ff8
 8001fb4:	08001ffc 	.word	0x08001ffc

08001fb8 <memset>:
 8001fb8:	4402      	add	r2, r0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d100      	bne.n	8001fc2 <memset+0xa>
 8001fc0:	4770      	bx	lr
 8001fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fc6:	e7f9      	b.n	8001fbc <memset+0x4>

08001fc8 <_init>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	bf00      	nop
 8001fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fce:	bc08      	pop	{r3}
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4770      	bx	lr

08001fd4 <_fini>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr
